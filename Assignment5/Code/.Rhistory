"responsive"),
font_size = 9)
# Plot geocoded hospitals
tm_shape(hosps.sp) +                # The layer we are plotting
tm_basemap("Esri.WorldStreetMap",    # The background (we'll learn more later)
alpha = 0.7) +            # Make slightly transparent
tm_dots(col = "blue") +           # The attributes of the layer
tm_layout(title = "Michigan Hospitals\nGoogle Geocode")
# Plot geocoded hospitals
tm_shape(hosps.sp) +                # The layer we are plotting
tm_basemap("Esri.WorldStreetMap",    # The background (we'll learn more later)
alpha = 0.7) +            # Make slightly transparent
tm_dots(col = "blue") +           # The attributes of the layer
tm_layout(main.title = "Michigan Hospitals\nGoogle Geocode")
## Create a string variable with the API endpoint location
dstk.url <- "http://www.datasciencetoolkit.org/maps/api/geocode/json"
## Create a string that can be passed to the API
addr <- "220 E Cameron Ave, Chapel Hill, NC, 27514"
## Use GET from httr
dstk.api <- GET(dstk.url,
query=list(sensor="FALSE",
address = addr))   # < this is our data
## Get output from API
gc <- fromJSON(content(dstk.api,
type="text",
encoding = "UTF-8"))
## Extract information from json output
lon <- gc$results[[1]]$geometry$location$lng
lat <- gc$results[[1]]$geometry$location$lat
type <- gc$results[[1]]$geometry$location_type
status <- gc$status
## Print to console
c(lon, lat, type, status)
## Read in hospital addresses
hosps <- read_csv("https://delamater.web.unc.edu/files/2020/09/MIhospitals-for-geocoding.csv")
## Create new field formatted for geocoding
hosps$Addr_gc <- paste(hosps$Address,
hosps$City,
hosps$State,
hosps$Zip,
sep=", ")
## Simple plot of X,Y locations
plot(gc.dstk$lon, gc.dstk$lat)
## Re-create a string variable with the API location
dstk.url <- "http://www.datasciencetoolkit.org/maps/api/geocode/json"
## Create empty holder for geocoded info
gc.dstk <- NULL
## Begin loop
for (i in 1:nrow(hosps)) {
## Use GET from httr
dstk.api <- GET(dstk.url,
query=list(sensor="FALSE",
address=hosps$Addr_gc[i]))
## Get output from API
gc <- fromJSON(content(dstk.api,
type="text",
encoding = "UTF-8"))
## Extract information from json output
lon <- gc$results[[1]]$geometry$location$lng
lat <- gc$results[[1]]$geometry$location$lat
type <- gc$results[[1]]$geometry$location_type
status <- gc$status
## Add output to holder
gc.dstk <- rbind(gc.dstk, c(lon,
lat,
type,
status))
## End loop
}
## Convert results to dataframe
gc.dstk <- as.data.frame(gc.dstk)
## Rename columns
names(gc.dstk) <- c("lon", "lat", "type", "status")
## Convert results to dataframe
gc.dstk <- as_tibble(gc.dstk)
## Re-create a string variable with the API location
dstk.url <- "http://www.datasciencetoolkit.org/maps/api/geocode/json"
## Create empty holder for geocoded info
gc.dstk <- NULL
## Begin loop
for (i in 1:nrow(hosps)) {
## Use GET from httr
dstk.api <- GET(dstk.url,
query=list(sensor="FALSE",
address=hosps$Addr_gc[i]))
## Get output from API
gc <- fromJSON(content(dstk.api,
type="text",
encoding = "UTF-8"))
## Extract information from json output
lon <- gc$results[[1]]$geometry$location$lng
lat <- gc$results[[1]]$geometry$location$lat
type <- gc$results[[1]]$geometry$location_type
status <- gc$status
## Add output to holder
gc.dstk <- rbind(gc.dstk, c(lon,
lat,
type,
status))
## End loop
}
## Convert results to dataframe
gc.dstk <- as_tibble(gc.dstk)
## Rename columns
names(gc.dstk) <- c("lon", "lat", "type", "status")
View(gc.dstk)
## Convert columns to numeric
gc.dstk[,1:2] <- gc.dstk[,1:2] %>% mutate_all(as.numeric)
## Write out as shapefile
st_write(hosps.sp, "MIhospitals_gc_google.shp",
driver = "ESRI Shapefile",
quiet = TRUE,
delete_layer = TRUE)
## Write out as shapefile
st_write(hosps.sp, "MIhospitals_gc_google.shp",
driver = "ESRI Shapefile",
quiet = TRUE,
delete_layer = TRUE)
## Write out as shapefile
st_write(hosps.sp, "MIhospitals_gc_google.shp",
driver = "ESRI Shapefile",
delete_layer = TRUE)
## Read in hospital addresses
hosps <- read_csv("https://delamater.web.unc.edu/files/2020/09/MIhospitals-for-geocoding.csv")
## Create new field formatted for geocoding
hosps$Addr_gc <- paste(hosps$Address,
hosps$City,
hosps$State,
hosps$Zip,
sep=", ")
kable(head(hosps),
caption = "Preview of Hospital Table (with new field)") %>%
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
font_size = 9)
## Re-create a string variable with the API location
dstk.url <- "http://www.datasciencetoolkit.org/maps/api/geocode/json"
## Create empty holder for geocoded info
gc.dstk <- NULL
## Begin loop
for (i in 1:nrow(hosps)) {
## Use GET from httr
dstk.api <- GET(dstk.url,
query=list(sensor="FALSE",
address=hosps$Addr_gc[i]))
## Get output from API
gc <- fromJSON(content(dstk.api,
type="text",
encoding = "UTF-8"))
## Extract information from json output
lon <- gc$results[[1]]$geometry$location$lng
lat <- gc$results[[1]]$geometry$location$lat
type <- gc$results[[1]]$geometry$location_type
status <- gc$status
## Add output to holder
gc.dstk <- rbind(gc.dstk, c(lon,
lat,
type,
status))
## End loop
}
## Convert results to dataframe
gc.dstk <- as.data.frame(gc.dstk)
## Convert columns to numeric
gc.dstk[,1:2] <- gc.dstk[,1:2] %>%
mutate_all(as.character) %>%
mutate_all(as.numeric)
## Rename columns
names(gc.dstk) <- c("lon", "lat", "type", "status")
kable(head(gc.dstk),
caption = "Preview of DSTK Geocode Results") %>%
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"), font_size = 10)
## Simple plot of X,Y locations
plot(gc.dstk$lon, gc.dstk$lat)
getwd()
setwd("/Volumes/Patriot/courses/UNC/GEOG215/testing-ground/A4_working")
library(tidyverse)
library(sf)
# Read NC state-level data
nc.st.dat <- read_csv("../Output/NC_State_COVID_POP_2020-09-23.csv")
# Read NC zip-level data (for mapping)
nc.zip.dat <- read_csv("../Output/NC_ZIPmapping_COVID_POP_2020-09-23.csv")
# Read NC zip spatial data layer (simplified for mapping)
nc.zip.sp <- st_read("../Output/NC_ZIP_2020_mapping.shp")
# Join/merge spatial and table data
nc.zip.sp <- merge(nc.zip.sp,
nc.zip.dat,
by.x = "ZIP_CODE",
by.y = "ZIPCODEmap",
all.x = TRUE)
st_write(nc.zip.sp, "NC_ZIP_COVID.shp")
setwd("/Volumes/Patriot/courses/UNC/GEOG215/2020-FS/assignments/A5/Assignment5/Code")
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
# Read NC Zip Code COVID data
nc.zip.covid <- st_read("../Data/NC_ZIP_COVID.shp")
str(nc.zip.covid)
# Create summary information holder
# for Deaths per 1000 residents information
summary.table <- tibble(MEASURE = c("Observations",
"Minimum",
"Maximum",
"Mean",
"Median",
"Standard Deviation"),
VALUE = c(sum(!is.na(nc.zip.covid$DEATHRATE)),
min(nc.zip.covid$DEATHRATE, na.rm = TRUE),
max(nc.zip.covid$DEATHRATE, na.rm = TRUE),
mean(nc.zip.covid$DEATHRATE, na.rm = TRUE),
median(nc.zip.covid$DEATHRATE, na.rm = TRUE),
sd(nc.zip.covid$DEATHRATE, na.rm = TRUE)
)
)
View(summary.table)
setwd("/Volumes/Patriot/courses/UNC/GEOG215/testing-ground/A4_working")
nc.zip <- st_read("../Data/sp/NC_ZIP_2020.shp")
nc.zip <- st_read("NC_ZIP_2020.shp")
nc.zip.pop <- read_excel("Population data.xlsx")
library(readxl)
nc.zip.pop <- read_excel("Population data.xlsx")
nc.zip.cvd <- read_csv("NC_COVID_2020-09-23_ZIP_good.csv")
#
names(nc.zip.pop) <- c("ZIPCODE", "POP")
#
nc.zip.cvd <- nc.zip.cvd[,c(2,4,5)]
#
names(nc.zip.cvd) <- c("ZIPCODE", "CASES", "DEATHS")
#
nc.zip.cvd.pop <- merge(nc.zip.pop, nc.zip.cvd, by = "ZIPCODE")
# Write out tabular data
write_csv(nc.zip.cvd.pop, "../Output/NC_ZIP_COVID_POP_2020-09-23.csv")
write_csv(nc.zip.cvd.pop, "NC_ZIP_COVID_POP_2020-09-23_good.csv")
nc.cvd.pop <- read_csv("NC_ZIP_COVID_POP_2020-09-23_good.csv")
# Read in reported Zip Code to Spatial Data Zip Code
#  crosswalk table
nc.xwalk <- read_csv("ZIP_reportdata_map_crosswalk.csv")
# Merge/join the covid/pop data with crosswalk table
nc.cvd.pop <- merge(nc.cvd.pop, nc.xwalk, by = "ZIPCODE")
#
nc.zip.cvd.pop.agg <- nc.cvd.pop[,2:5] %>%
group_by(ZIPCODEmap) %>%
summarize_all(sum, na.rm = TRUE)
# Calculate Cases and Deaths per 1000 people
nc.zip.cvd.pop.agg$CASERATE <- 1000 * nc.zip.cvd.pop.agg$CASES / nc.zip.cvd.pop.agg$POP
nc.zip.cvd.pop.agg$DEATHRATE <- 1000 * nc.zip.cvd.pop.agg$DEATHS / nc.zip.cvd.pop.agg$POP
#
nc.st.cvd.pop.agg <- colSums(nc.cvd.pop[,2:5], na.rm = TRUE)
# Calculate Cases and Deaths per 1000 people
nc.st.cvd.pop.agg[4] <- 1000 * nc.st.cvd.pop.agg[2] / nc.st.cvd.pop.agg[1]
nc.st.cvd.pop.agg[5] <- 1000 * nc.st.cvd.pop.agg[3] / nc.st.cvd.pop.agg[1]
# Add names to values that were just calculated
names(nc.st.cvd.pop.agg)[4:5] <- c("CASERATE", "DEATHRATE")
# Convert to dataframe
nc.st.df <- data.frame("Metric" = names(nc.st.cvd.pop.agg),
"Value" = nc.st.cvd.pop.agg)
write_csv(nc.zip.cvd.pop.agg, "NC_ZIPmapping_COVID_POP_2020-09-23_good.csv")
# Read NC zip-level data (for mapping)
nc.zip.dat <- read_csv("NC_ZIPmapping_COVID_POP_2020-09-23_good.csv")
nc.zip.dat <- read_csv("NC_ZIPmapping_COVID_POP_2020-09-23_good.csv")
# Read NC zip spatial data layer (simplified for mapping)
nc.zip.sp <- st_read("NC_ZIP_2020_mapping.shp")
# Read NC zip spatial data layer (simplified for mapping)
nc.zip.sp <- st_read("NC_ZIP_2020_mapping.shp")
nc.zip.sp <- st_read("NC_ZIP_2020_mapping.shp")
# Read NC zip spatial data layer (simplified for mapping)
nc.zip.sp <- st_read("NC_ZIP_2020_mapping.shp")
# Read NC zip spatial data layer (simplified for mapping)
nc.zip.sp <- st_read("NC_ZIP_2020_mapping.shp")
setwd("/Volumes/Patriot/courses/UNC/GEOG215/testing-ground/A4_working")
nc.zip.sp <- st_read("NC_ZIP_2020_mapping.shp")
# Join/merge spatial and table data
nc.zip.sp <- merge(nc.zip.sp,
nc.zip.dat,
by.x = "ZIP_CODE",
by.y = "ZIPCODEmap",
all.x = TRUE)
View(nc.zip.sp)
hist(nc.zip.sp$DEATHRATE)
hist(nc.zip.sp$CASERATE)
hist(nc.zip.sp$DEATHS)
hist(nc.zip.sp$CASES)
st_write(nc.zip.sp, "NC_ZIP_COVID.shp", append = FALSE)
setwd("/Volumes/Patriot/courses/UNC/GEOG215/2020-FS/assignments/A5/Assignment5/Code")
# Read NC Zip Code COVID data
nc.zip.covid <- st_read("../Data/NC_ZIP_COVID.shp")
# Create summary information holder
# for Deaths per 1000 residents information
summary.table <- tibble(MEASURE = c("Observations",
"Minimum",
"Maximum",
"Mean",
"Median",
"Standard Deviation"),
DEATH_RATE = c(sum(!is.na(nc.zip.covid$DEATHRATE)),
min(nc.zip.covid$DEATHRATE, na.rm = TRUE),
max(nc.zip.covid$DEATHRATE, na.rm = TRUE),
mean(nc.zip.covid$DEATHRATE, na.rm = TRUE),
median(nc.zip.covid$DEATHRATE, na.rm = TRUE),
sd(nc.zip.covid$DEATHRATE, na.rm = TRUE)
),
CASE_RATE = c(sum(!is.na(nc.zip.covid$CASERATE)),
min(nc.zip.covid$CASERATE, na.rm = TRUE),
max(nc.zip.covid$CASERATE, na.rm = TRUE),
mean(nc.zip.covid$CASERATE, na.rm = TRUE),
median(nc.zip.covid$CASERATE, na.rm = TRUE),
sd(nc.zip.covid$CASERATE, na.rm = TRUE)
)
)
## Print nice version of the table
kable(summary.table,
digits = 3,
format.args = list(big.mark = ",",
scientific = FALSE,
drop0trailing = TRUE),
caption = "North Carolina COVID-19 Deaths per 1000 residents summary (by Zip Code)") %>%
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = F)
library(tidyverse)
library(sf)
library(tmap)
library(knitr)
library(kableExtra)
# Create summary information holder
# for Deaths per 1000 residents information
summary.table <- tibble(MEASURE = c("Observations",
"Minimum",
"Maximum",
"Mean",
"Median",
"Standard Deviation"),
DEATH_RATE = c(sum(!is.na(nc.zip.covid$DEATHRATE)),
min(nc.zip.covid$DEATHRATE, na.rm = TRUE),
max(nc.zip.covid$DEATHRATE, na.rm = TRUE),
mean(nc.zip.covid$DEATHRATE, na.rm = TRUE),
median(nc.zip.covid$DEATHRATE, na.rm = TRUE),
sd(nc.zip.covid$DEATHRATE, na.rm = TRUE)
),
CASE_RATE = c(sum(!is.na(nc.zip.covid$CASERATE)),
min(nc.zip.covid$CASERATE, na.rm = TRUE),
max(nc.zip.covid$CASERATE, na.rm = TRUE),
mean(nc.zip.covid$CASERATE, na.rm = TRUE),
median(nc.zip.covid$CASERATE, na.rm = TRUE),
sd(nc.zip.covid$CASERATE, na.rm = TRUE)
)
)
## Print nice version of the table
kable(summary.table,
digits = 3,
format.args = list(big.mark = ",",
scientific = FALSE,
drop0trailing = TRUE),
caption = "North Carolina COVID-19 Deaths per 1000 residents summary (by Zip Code)") %>%
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = F)
## plot histogram
ggplot(nc.zip.covid,
aes(x = DEATHRATE)) +
geom_histogram() +
xlab("COVID-19 deaths per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram() +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 1) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 0.5) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 2) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 1.5) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 2) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 0.5) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 1.5) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASERATE)) +
geom_histogram(binwidth = 2) +
xlab("COVID-19 cases per 1,000 People") +
theme_minimal()
## Plot map
tm_shape(nc.zip.covid) +
tm_polygons("CASES",
style = "jenks",
palette = "YlOrRd",
lwd = 0.25,
border.col = "black",
border.alpha = 0.5,
title = "COVID-19 Cases")
## Plot map
tm_shape(nc.zip.covid) +
tm_polygons("CASES",
style = "jenks",
palette = "YlOrRd",
lwd = 0.25,
border.col = "black",
border.alpha = 0.5,
title = "COVID-19 Cases") +
tm_layout(title = "COVID-19 Cases")
## Plot map
tm_shape(nc.zip.covid) +
tm_polygons("CASERATE",
style = "jenks",
palette = "YlOrRd",
lwd = 0.25,
border.col = "black",
border.alpha = 0.5,
title = "COVID-19 Case Rate\nper 1,000 people")
## Plot map
tm_shape(nc.zip.covid) +
tm_polygons("CASERATE",
style = "jenks",
palette = "YlOrRd",
lwd = 0.25,
border.col = "black",
border.alpha = 0.5,
title = "COVID-19 Case Rate (per 1,000 people)")
# Read NC Zip Code COVID data
nc.zip.covid <- st_read("../Data/NC_ZIP_COVID.shp", quiet = TRUE)
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASEs)) +
geom_histogram() +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASES)) +
geom_histogram() +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASE)) +
geom_histogram(binwidth = 2) +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASES)) +
geom_histogram(binwidth = 2) +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASES)) +
geom_histogram(binwidth = 10) +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASES)) +
geom_histogram(binwidth = 20) +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASES)) +
geom_histogram(binwidth = 15) +
xlab("COVID-19 cases per 1,000 People") +
ggtitle("Histogram of COVID-19 Case Rates")
## plot histogram
ggplot(nc.zip.covid,
aes(x = CASES)) +
geom_histogram(binwidth = 50) +
xlab("COVID-19 cases") +
ggtitle("Histogram of COVID-19 Cases")
